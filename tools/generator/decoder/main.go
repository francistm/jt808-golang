package main

import (
	"bytes"
	"os"
	"path"

	. "github.com/dave/jennifer/jen"
	"github.com/francistm/jt808-golang/internal/generator"
)

func main() {
	f := NewFile("message")
	f.HeaderComment("Code generated by generator/decoder, DO NOT MODIFY MANUALLY")
	messageDecls, err := generator.GetAllMessageDecls()

	if err != nil {
		panic(err)
	}

	f.Func().
		Params(
			Id("m").Op("*").Id("MessagePack").Types(Id("T")),
		).
		Id("NewPackBodyFromMesgId").
		Params().
		Parens(List(
			Any(),
			Error(),
		)).
		Block(
			If(Id("m").Dot("PackHeader").Dot("Package").Op("!=").Nil()).Block(
				Return(New(Id("PartialPackBody")), Nil()),
			).Else().Block(
				Switch(Id("m").Dot("PackHeader").Dot("MessageID")).BlockFunc(func(g *Group) {
					for _, mesgDecl := range messageDecls {
						g.Case(Lit(mesgDecl.HeaderID)).Block(Return(New(Id(mesgDecl.Name)), Nil()))
					}

					g.Default().Return(
						Nil(),
						Qual("fmt", "Errorf").Call(
							Lit("unsupported messageId: 0x%.4X"),
							Id("m").Dot("PackHeader").Dot("MessageID"),
						),
					)
				}),
			),
		)

	buf := new(bytes.Buffer)

	if err := f.Render(buf); err != nil {
		panic(err)
	}

	cwd, err := os.Getwd()

	if err != nil {
		panic(err)
	}

	filePath := path.Join(cwd, "message", "mesg_pack.gen.go")

	outFile, err := os.OpenFile(filePath, os.O_CREATE|os.O_RDWR|os.O_TRUNC, 0644)

	if err != nil {
		panic(err)
	}

	if err := f.Render(outFile); err != nil {
		panic(err)
	}
}
