package main

import (
	"bytes"
	"io/ioutil"

	. "github.com/dave/jennifer/jen"
	"github.com/francistm/jt808-golang/internal/generator"
)

func main() {
	f := NewFile("jt808")
	f.HeaderComment("Code generated by generator/decoder, DO NOT MODIFY MANUALLY")
	messageStructs, err := generator.GetAllMessageStructs()

	if err != nil {
		panic(err)
	}

	f.Func().
		Params(
			Id("m").Op("*").Id("MessagePack").Types(Id("T")),
		).
		Id("unmarshalBody").
		Params(
			Id("buf").Index().Byte(),
		).
		Error().
		Block(
			Var().Defs(
				Id("body").Any(),
				Id("reader").Op("=").Qual("bytes", "NewReader").Call(Id("buf")),
			),
			Line(),
			If(Id("m").Dot("PackHeader").Dot("Package").Op("!=").Nil()).Block(
				Id("body").Op("=").New(Qual("github.com/francistm/jt808-golang/message", "PartialPackBody")),
			).Else().Block(
				Switch(Id("m").Dot("PackHeader").Dot("MessageID")).BlockFunc(func(g *Group) {
					for _, mesgStruct := range messageStructs {
						g.Case(Lit(mesgStruct.HeaderID)).
							Block(
								Id("body").Op("=").New(Id("message").Dot(mesgStruct.Name)),
							)
					}

					g.Default().Return(
						Qual("fmt", "Errorf").Call(
							Lit("unsupported messageId: 0x%.4X"),
							Id("m").Dot("PackHeader").Dot("MessageID"),
						),
					)
				}),
			),
			Line(),
			Id("m").Dot("PackBody").Op("=").Id("body").Assert(Id("T")),
			Line(),
			Return(Id("unmarshalBody").Call(Id("reader"), Id("body"))),
		)

	buf := new(bytes.Buffer)

	if err := f.Render(buf); err != nil {
		panic(err)
	}

	if err := ioutil.WriteFile("decoder.gen.go", buf.Bytes(), 0644); err != nil {
		panic(err)
	}
}
