package main

import (
	"os"

	. "github.com/dave/jennifer/jen"
	"github.com/francistm/jt808-golang/internal/generator"
)

func main() {
	var messagePackCaseList []Code

	f := NewFile("jt808")
	f.HeaderComment("Code generated by generator/decoder, DO NOT MODIFY MANUALLY")
	messageStructs, err := generator.GetAllMessageStructs()

	if err != nil {
		panic(err)
	}

	for _, messageStruct := range messageStructs {
		code := Case(Lit(messageStruct.HeaderID)).
			Block(
				Id("messagePack").
					Dot("PackBody").
					Op("=").
					New(Id("message").Dot(messageStruct.Name)),
			)

		messagePackCaseList = append(messagePackCaseList, code)
		messagePackCaseList = append(messagePackCaseList, Line())
	}

	messagePackCaseList = append(messagePackCaseList, Default().Block(
		Return(
			Qual("fmt", "Errorf").Call(
				Lit("unsupported messageId: 0x%.4X"),
				Id("messagePack").Dot("PackHeader").Dot("MessageID"),
			),
		),
	))

	f.Func().
		Params(
			Id("messagePack").Id("*MessagePack"),
		).
		Id("unmarshalBody").
		Params(
			Id("buf").Index().Byte(),
		).
		Error().
		Block(
			Id("reader").Op(":=").Qual("bytes", "NewReader").Call(Id("buf")),
			Line(),
			If(Id("messagePack").Dot("PackHeader").Dot("Package").Op("!=").Nil()).Block(
				Id("messagePack").Dot("PackBody").Op("=").New(Qual("github.com/francistm/jt808-golang/message", "PartialPackBody")),
			).Else().Block(
				Switch(Id("messagePack").Dot("PackHeader").Dot("MessageID")).Block(messagePackCaseList...),
			),
			Line(),
			Return(
				Id("unmarshalBody").Call(
					Id("reader"),
					Id("messagePack").Dot("PackBody"),
				),
			),
		)

	outputFile, err := os.OpenFile("decode_gen.go", os.O_CREATE|os.O_RDWR, 0644)

	if err != nil {
		panic(err)
	}

	defer func() {
		_ = outputFile.Close()
	}()

	if err := f.Render(outputFile); err != nil {
		panic(err)
	}
}
